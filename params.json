{"name":"Backbone.Modelbinding","body":"## About Backbone.ModelBinding\r\n\r\nConvention-based, awesome model binding for [Backbone.js](http://documentcloud.github.com/backbone),\r\ninspired by [Brad Phelan](http://xtargets.com/2011/06/11/binding-model-attributes-to-form-elements-with-backbone-js/),\r\n[Knockout.js](http://knockoutjs.com/) data-binding capabilities, \r\nand [Brandon Satrom](http://userinexperience.com/?p=633)'s work with Knockout.\r\n\r\nThis plugin provides a simple, convention based mechanism to create bi-directional\r\nbinding between your Backbone models and your HTML elements, including form inputs, \r\ndivs, spans, and so on. \r\n\r\nInstead of writing the same boiler plate code to read from your form inputs and\r\npopulate the model attributes, for every input on your form, you can make a \r\nsingle call to `Backbone.ModelBinding.bind(myView)` and have all of your inputs\r\nautomatically wired up. Any change you make to a form input will populate a\r\ncorresponding model attribute for you. The binding is bi-directional, as well.\r\nThis means that changes to your underlying model will be propagated to your\r\nform inputs without having to manually bind to your model's `change` events.\r\n\r\nIf you're looking for Knockout.js-style `data-bind` attributes, for Backbone,\r\nthen this is the plugin for you. Backbone.ModelBinding provides some very basic\r\nsupport for `data-bind` attributes, allowing your Backbone model `change` events\r\nto modify nearly any HTML element on your page. Whether it's updating the text\r\nof a `<div>`, or changing the css class of an `<img>` tag, the `data-bind` \r\nsupport provides a very powerful and flexible means of creating a very rich\r\nuser experience.\r\n\r\nThe [upstream project](https://github.com/derickbailey/backbone.modelbinding) by\r\n[Derick Bailey](https://github.com/derickbailey) was abandoned on 4/22/12. This \r\nproject is a continuation\r\n\r\n## Getting Started\r\n\r\nIt's easy to get up and running. You only need to have Backbone (including underscore.js - \r\na requirement for Backbone) and jQuery in your page before including the backbone.modelbinding\r\nplugin.\r\n\r\n### Building Project on your local PC\r\n\r\nPrerequisites:\r\n\r\n* JDK installed\r\n* Maven installed and available in PATH\r\n\r\nDownload project to your local repo:\r\n\r\n```\r\n$ git clone git://github.com/oaprnd/backbone.modelbinding.git\r\n```\r\n\r\nPlease note that `backbone.modelbinding.js` and `backbone.modelbinding.min.js` in the root directory are\r\ngenerated while the build, so if you want to edit source file you should change this one:\r\n\r\n```\r\nsrc\r\n \\_ main\r\n    \\_ javascript\r\n       \\_ backbone.modelbinding.js\r\n```\r\n\r\nWhen you change your code you can run the build by executing\r\n\r\n\r\n** git clone git://github.com/oaprnd/backbone.modelbinding.git\r\n** mvn install (this will generate minified file and perform all tests)\r\n** mvn jasmine:bdd to execute online Jasmine specs only\r\n\r\n### Prerequisites\r\n\r\n* Backbone.js v0.9.0\r\n* Underscore.js v1.3.1\r\n* jQuery v1.7.1\r\n\r\nThis is a plugin for Backbone.js and is built and tested against these versions of these\r\nlibraries. At this point, I make no guarantees of it working with any version of Backbone or jQuery.\r\n\r\n### Get The ModelBinding Plugin\r\n\r\nDownload the `backbone.modelbinding.js` file from this github repository and copy it into \r\nyour javascripts folder. Add the needed `<script>` tag to bring the plugin into any page\r\nthat wishes to use it. Be sure to include the modelbinding file _after_ the backbone.js file.\r\n\r\n### Model Binding\r\n\r\nThe model binding code is executed with a call to `Backbone.ModelBinding.bind(view)`. There are\r\nseveral places that it can be called from, depending on your circumstances.\r\n\r\nAll of the element binding happens within the context of the view's `el`, therefore you must\r\ncall the model binding code after your view's `el` has been populated with the elements that\r\nwill be bound to.\r\n\r\n#### Binding After Rendering\r\n\r\nIf your view modifies the html contents of the view's `el` in the `render` method, you should \r\ncall the model binding after the modifications are made:\r\n\r\n````\r\nSomeView = Backbone.View.extend({\r\n  render: function(){\r\n    // ... render your form here\r\n    $(this.el).html(\"... some html and content goes here ... \");\r\n\r\n    // execute the model bindings\r\n    Backbone.ModelBinding.bind(this);\r\n  }\r\n});\r\n````\r\n\r\n#### Binding A View That Does Not Render\r\n\r\nIf, however, your view has an `el` that represents an existing element in your html, and the\r\ncontents of the `el` are not modified during a call to `render`, then you can make the call to\r\nthe model binding code in the initializer or anywhere else.\r\n\r\n````\r\n<form id=\"some-form\">\r\n  Name: <input id=\"name\">\r\n</form>\r\n````\r\n\r\n````\r\nFormView = Backbone.View.extend({\r\n  el: \"#some-form\",\r\n\r\n  initialize: function(){\r\n    Backbone.ModelBinding.bind(this);\r\n  }\r\n});\r\n````\r\n\r\n#### Binding From Outside A View\r\n\r\nThere is no requirement for the model binding code to be called from within a view directly.\r\nYou can bind the view from external code, like this:\r\n\r\n````\r\nFormView = Backbone.View.extend({\r\n  el: \"#some-form\",\r\n});\r\n\r\nformView = new FormView();\r\nBackbone.ModelBinding.bind(formView);\r\n````\r\n\r\n### Model Unbinding\r\n\r\nWhen your view has completed its work and is ready to be removed from the DOM, you not only\r\nneed to unbind your view's events (handled through the view's `remove` method, typically), you\r\nalso need to unbind the model events that are bound in the view. \r\n\r\nBackbone.ModelBinding can unbind its own events through a simple call to \r\n`Backbone.ModelBinding.unbind(view)`. If you do not call this method when your view is being\r\nclosed / removed / cleaned up, then you may end up with memory leaks and zombie views that\r\nare still responding to model change events.\r\n\r\n````\r\nFormView = Backbone.View.extend({\r\n  el: \"#some-form\",\r\n\r\n  initialize: function(){\r\n    Backbone.ModelBinding.bind(this);\r\n  },\r\n\r\n  close: function(){\r\n    this.remove();\r\n    this.unbind();\r\n    Backbone.ModelBinding.unbind(this);\r\n  }\r\n});\r\n````\r\n\r\n## Convention Bindings\r\n\r\nAutomatic bi-directional binding between your form input and your model. \r\n\r\nThe convention-based binding requires no additional configuration or code in your\r\nview, other than calling the `Backbone.ModelBinding.bind(this);` as noted above.\r\nWith the conventions binding, your `<input>` fields will be bound to the views model\r\nby the id of the input. \r\n\r\nFor example:\r\n\r\n````\r\n// something.html\r\n\r\n<input id='name'>\r\n\r\n// something.js\r\n\r\nSomeModel = Backbone.Model.extend();\r\n\r\nSomeView = Backbone.View.extend({\r\n  render: function(){\r\n    // ... render your form here\r\n\r\n    // execute the defined bindings\r\n    Backbone.ModelBinding.bind(this);\r\n  }\r\n});\r\n\r\nmodel = new SomeModel();\r\nview = new SomeView({model: model});\r\n\r\nmodel.set({name: \"some name\"});\r\n\r\n````\r\n\r\nIn this example, when `model.set` is called to set the name, \"some name\" will appear\r\nin the `#name` input field. Similarly, when the `#name` input field is changed, the\r\nvalue entered into that field will be sent to the model's `name` property.\r\n\r\n## Data-Bind Attributes\r\n\r\nBackbone.ModelBinding supports Knockout-style data-bind attributes on any arbitrary\r\nHTML element. These bindings will populate any attribute, the text, or HTML contents\r\nof an HTML element based on your configurations. This is particularly useful when a\r\nmodel that is being edited is also being displayed elsewhere on the screen.\r\n\r\nTo bind an element to a model's properties, add a `data-bind` attribute to the element\r\nand specify what should be updated with which model property using an `elementAttr modelAttr`\r\nformat. For example `<span data-bind=\"text name\">` will update the span's text with\r\nthe model's name property, when the model's name changes.\r\n\r\n````\r\n<form>\r\n  <input type=\"text\" id=\"name\">\r\n</form>\r\nName: <span data-bind=\"text name\">\r\n\r\nSomeView = Backbone.View.extend({\r\n  // ... \r\n\r\n  render: function(){\r\n    // ... \r\n    Backbone.ModelBinding.bind(this);\r\n  }\r\n});\r\n\r\nsomeModel = new SomeModel();\r\nsomeView = new SomeView({model: someModel});\r\n````\r\n\r\nIn this example, the model's `name` will be updated when you type into the text box\r\nand then tab or click away from it (to fire the change event). When the model's `name`\r\nproperty is updated, the `data-bind` convention will pick up the change and set\r\nthe text of the `span` to the model's name.\r\n\r\n### Data-Bind Multiple Attributes\r\n\r\nMultiple attributes can be specified for a single element's `data-bind` by separating\r\neach with a `;` (semi-colon). For example:\r\n\r\n````\r\n<form>\r\n  <input type=\"text\" id=\"name\">\r\n</form>\r\nName: <span data-bind=\"text name; class name\">\r\n\r\nSomeView = Backbone.View.extend({\r\n  // ... \r\n\r\n  render: function(){\r\n    // ... \r\n    Backbone.ModelBinding.bind(this);\r\n  }\r\n});\r\n\r\nsomeModel = new SomeModel();\r\nsomeView = new SomeView({model: someModel});\r\n````\r\n\r\nIn this example, both the text and the css class will be updated when you change\r\nthe name input. You can data-bind as many attributes as you need, in this manner.\r\n\r\n### Configurating the data-bind selector\r\n\r\nBy default, the data-bind capabilities looks for a `data-bind` attribute on the\r\nHTML elements being bound. This is configurable, though:\r\n\r\n````\r\nBackbone.ModelBinding.Conventions.databind.selector = \"[my-binder]\";\r\n````\r\n\r\nThis example will look for elements with an attribute of `my-binder` instead of\r\n`data-bind`.\r\n\r\n````\r\n<div my-binder=\"text someAttr\"></div>\r\n````\r\n\r\n### Special Cases For data-bind\r\n\r\nThere are several special cases for the data-bind attribute. These allow a little more\r\nfunctionality than just setting an attribute on an element. \r\n\r\n* (default) - if you only specify the model property, defaults to the text of the html element\r\n* text - replace the text contents of the element\r\n* html - replace the html contents of the element\r\n* enabled - enable or disable the html element\r\n\r\n#### (default)\r\n\r\nIf you only specify the model's property in the data-bind attribute, then the data-bind\r\nwill bind the value of that model property to the `text` of the html element.\r\n\r\n````\r\n<div data-bind=\"name\"/>\r\n````\r\n\r\nSee the document for data-bind text, below.\r\n\r\n#### text\r\n\r\nIf you set the data-bind attribute to use `text`, it will replace the text contents of the\r\nhtml element instead of just setting an element attribute.\r\n\r\n````\r\n<div id=\"someDiv\" data-bind=\"text someProperty\"></div>\r\n\r\n\r\nsomeModel.set({someProperty: \"some value\"});\r\n````\r\n\r\n#### html\r\n\r\nIf you set the data-bind attribute to use `html`, it will replace the entire\r\ninner html of the html element, instead of just setting an element attribute.\r\n\r\n````\r\n<div id=\"someDiv\" data-bind=\"html someProperty\"></div>\r\n\r\n\r\nsomeModel.set({someProperty: \"some value\"});\r\n````\r\n\r\n#### enabled\r\n\r\nThis special case breaks the html element standard of using a `disabled` attribute, specifically\r\nto inverse the logic used for enabling / disabling an element, to keep the data-bind attribute\r\nclean and easy to read.\r\n\r\nIf you have a model with a property that indicates a negative state, such as `invalid`, then you\r\ncan use a data-bind attribute of `disabled`:\r\n\r\n````\r\n<button id=\"someButton\" data-bind=\"disabled invalid\"></div>\r\n\r\n\r\nsomeModel.set({invalid: true});\r\n````\r\n\r\nHowever, some developers prefer to use positive state, such as `isValid`. In this case, setting\r\nthe disabled attribute to the model's isValid property would result in the button being disabled\r\nwhen the model is valid and enabled when the model is not valid. To correct this, a special case\r\nhas been added to enable and disable an element with `enabled`.\r\n\r\n````\r\n<button id=\"someButton\" data-bind=\"enabled isValid\"></div>\r\n\r\n\r\nsomeModel.set({isValid: false});\r\n````\r\n\r\nThis will disable the button when the model is invalid and enable the button when the model is\r\nvalid.\r\n\r\n#### displayed\r\n\r\nThis allows you to specify that an element should be shown or hidden by setting the css\r\nof the element according to the value of the model properties specified.\r\n\r\n````\r\n<div data-bind=\"displayed isValid\" />\r\n\r\nsomeModel.set({isValid: false});\r\n````\r\n\r\nWhen the model's property is set to false, the HTML element's `display` css will be set\r\nto `none`. When the model's property is set to true, the HTML element's `display` css\r\nwill be set to `block`.\r\n\r\n#### hidden\r\n\r\nThis is the inverse of `displayed`.\r\n\r\n````\r\n<div data-bind=\"hidden isValid\" />\r\n\r\nsomeModel.set({isValid: true});\r\n````\r\n\r\nWhen the model's property is set to false, the HTML element's `display` css will be set\r\nto `block`. When the model's property is set to true, the HTML element's `display` css\r\nwill be set to `none`.\r\n\r\n### Data-Bind To Any Model Event\r\n\r\nIn addition to binding model attributes, you can use the data-bind functionality to\r\nbind to any arbitrary event that the model fires. This is done with the syntax:\r\n\r\n```html\r\n<div data-bind=\"text event:foo\"></div>\r\n```\r\n\r\nwhere `foo` is the event that is triggered from the model. The first parameter\r\nof the event will be used as the data for the element.\r\n\r\n```js\r\nmodel.trigger(\"foo\", \"bar\");\r\n```\r\n\r\nThis will cause the above data-binding to produce `<div>bar</div>`.\r\n\r\n### Data-Bind Substitutions\r\n\r\nIf a model's property is `unset`, the data-bind may not update correctly when using `text` or `html`\r\nas the bound attribute of the element.\r\n\r\n````\r\n<div data-bind=\"text something\"></div>\r\n\r\nmodel.set({something: \"whatever\"});\r\nmodel.unset(\"something\");\r\n````\r\n\r\nThe result will be a div with it's text set to \"\". this is handled through the data-bind's \r\nsubstitutions for undefined values. The default substitution is to replace an undefined\r\nvalue with an empty string. However, this can be per attribute:\r\n\r\n````\r\n<div data-bind=\"text something\"></div>\r\n<div data-bind=\"html something\"></div>\r\n\r\nBackbone.ModelBinding.Configuration.dataBindSubst({\r\n  text: \"undefined. setting text to this\",\r\n  html: \"&nbsp;\"\r\n});\r\nmodel.set({something: \"whatever\"});\r\nmodel.unset(\"something\");\r\n````\r\n\r\nThe result of this example will be a div that displays \"undefined. setting the text to this\" and a\r\ndiv whose contents is a single space, instead of being empty.\r\n\r\n## Form Binding Conventions\r\n\r\nThe following form input types are supported by the form convention binder:\r\n\r\n* text\r\n* textarea\r\n* password\r\n* checkbox\r\n* select \r\n* radio button groups\r\n\r\nHTML5\r\n\r\n* number\r\n* range\r\n* email\r\n* url\r\n* tel\r\n* search\r\n\r\nRadio buttons are group are assumed to be grouped by the `name` attribute of the \r\nradio button items. \r\n\r\nSelect boxes will populate 2 separate fields into the model that they are bound to.\r\nThe standard `#fieldid` will be populated with the selected value. An additional\r\n`{#fieldid}_text` will be populated with the text from the selected item. For example,\r\na selected option of \r\n\r\n````\r\n<select id='company'>\r\n  <option value=\"foo_bar\">Foo Bar Widgets, Inc.</option>\r\n  ...\r\n</select>\r\n```` \r\n\r\nwill populate the `company` property of the model with \"foo_bar\", and will populate\r\nthe `company_text` property of the model with \"Foo Bar Widgets, Inc.\"\r\n\r\nThere is no support for hidden fields at the moment, because there is no 'change' event\r\nthat jQuery can listen to on a hidden field.\r\n\r\n### Configuring The Bound Attributes\r\n\r\nThe convention binding system allows you to specify the attribute to use for the convention, by\r\nthe input type. The default configuration is:\r\n\r\n```\r\n{\r\n  text: \"id\",\r\n  textarea: \"id\",\r\n  password: \"id\",\r\n  radio: \"name\",\r\n  checkbox: \"id\",\r\n  select: \"id\"\r\n}\r\n````\r\n\r\nYou can override this configuration and use any attribute you wish, by specifying any or all of\r\nthese input types when you call the model binding. This is useful when you have field ids that\r\ndo not match directly to the model properties. \r\n\r\n#### Override All Element Binding Attributes\r\n\r\nThe following will use use the `class` attribute's value as the binding for all input field:\r\n\r\n````\r\nSomeView = Backbone.View.extend({\r\n  render: function(){\r\n    // ... some rendering here\r\n    Backbone.ModelBinding.bind(this, { all: \"class\" });\r\n  }\r\n});\r\n\r\n<input type=\"text\" id=\"the_model_name\" class=\"name\">\r\n````\r\n\r\nIf the same convention needs to be used throughout an application, and not just withing a single\r\nview, the configuration can be set at a global level:\r\n\r\n````\r\nBackbone.ModelBinding.Configuration.configureAllBindingAttributes(\"class\");\r\n````\r\n\r\n#### Override Individual Element Binding Attributes\r\n\r\nThe following will use a `modelAttr` attribute value as the convention for text boxes, only.\r\n\r\n````\r\nSomeView = Backbone.View.extend({\r\n  render: function(){\r\n    // ... some rendering here\r\n    Backbone.ModelBinding.bind(this, { text: \"modelAttr\" });\r\n  }\r\n});\r\n\r\n<input type=\"text\" id=\"the_model_name\" modelAttr=\"name\">\r\n````\r\n\r\nWhen this text box has it's value changed, the model's `name` property will be populated with\r\nthe value instead of `the_model_name`.\r\n\r\nIf the same convention needs to be used throughout an application, and not just withing a single\r\nview, the configuration can be set at a global level:\r\n\r\n````\r\nBackbone.ModelBinding.Configuration.configureBindingAttributes({text: \"modelAttr\"});\r\n````\r\n\r\nNow all text boxes will update the model property specified in the text box's `modelAttr`.\r\n\r\n## Pluggable Conventions\r\n\r\nThe convention based bindings are pluggable. Each of the existing form input types can have it's\r\nconvention replaced and you can add your own conventions for input types not currently handled,\r\netc. \r\n\r\nTo replace a convention entirely, you need to supply a json document that has two pieces of\r\ninformation: a jQuery selector string and an object with a `bind` method. Place the convention\r\nin the `Backbone.ModelBinding.Conventions` and it will be picked up and executed. The `bind`\r\nmethod receives three parameters: the jQuery selector you specified, the Backbone view, and\r\nthe model being bound.\r\n\r\nYou can replace the handler of an existing convention. For example, this will set the\r\nvalue of a textbox called `#name` to some text, instead of doing any real binding.\r\n\r\n````\r\nvar nameSettingsHandler = {\r\n  bind: function(selector, view, model){\r\n    view.$(\"#name\").val(\"a custom convention supplied this name\");\r\n  }\r\n};\r\n\r\nBackbone.ModelBinding.Conventions.text.handler = nameSettingsHandler;\r\n````\r\n\r\nYou can also create your own conventions that do just about anything you want. Here's an example\r\nthat modifies the contents of `<p>` tags:\r\n\r\n````\r\nvar PConvention = {\r\n  selector: \"p\",\r\n  handler: {\r\n    bind: function(selector, view, model){\r\n      view.$(selector).each(function(index){\r\n        var name = model.get(\"name\");\r\n        $(this).html(name);\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nBackbone.ModelBinding.Conventions.paragraphs = PConvention;\r\n````\r\n\r\nThis example will find all `<p>` tags in the view and render the `name` property from the model\r\ninto that paragraph, replacing all other text. Note that the name of the convention is set to\r\n`paragraphs` when added to the conventions. This name did not exist prior to this assignment, so\r\nthe convention was added. If you assign a convention to an existing name, you will replace that\r\nconvention.\r\n\r\nThe list of existing conventions includes:\r\n\r\n* text\r\n* password\r\n* radio\r\n* checkbox\r\n* select\r\n* textarea\r\n* number\r\n* range\r\n* tel\r\n* search\r\n* url\r\n* email\r\n* databind\r\n\r\nFor fully functional, bi-directional binding convention examples, check out the source code\r\nto Backbone.ModelBinding in the `backbone.modelbinding.js` file.\r\n\r\n## Using Backbone.Modelbinding as an AMD module (require.js)\r\n\r\nBackbone.Modelbinding detects an AMD loader like require.js and registrers as a module named 'modelbinding' if so.\r\n\r\nThe prerequisites of Modelbinding must be known as AMD modules which is supported in following versions:\r\n\r\n* JQuery 1.7\r\n* Underscore 1.2.3\r\n* Backbone, use jrburke's 0.5.3-optamd3 branch (https://github.com/jrburke/backbone/tree/optamd3) until supported by Backbone natively\r\n\r\n### Setup\r\n\r\nModule names must be 'jquery', 'underscore', and 'backbone' which is done easily by naming files as jquery.js, underscore.js and backbone.js placed\r\nin the same folder as require.js. Or by settings up require.js alias configure like\r\n\r\n````\r\nrequire.config({\r\n  paths: {\r\n  // AMD modules\r\n    jquery:       'libs/jquery/1.7.1/jquery',\r\n    underscore:   'libs/underscore/1.2.3/underscore',\r\n    backbone:     'libs/backbone/0.5.3-optamd3/backbone',\r\n    modelbinding: 'libs/backbone/modelbinding/0.4.1-amd/backbone.modelbinding'\r\n  }\r\n});\r\n````\r\n### Short Example\r\n\r\nLoad require.js as normal:\r\n\r\n````\r\n<script type=\"text/javascript\" src=\"js/require.js\"></script>\r\n````\r\n\r\nHereafter require.js will take care of loading AMD module dependencies and you can use Backbone and Modelbinding\r\nas you are used to:\r\n\r\n````\r\n<script type=\"text/javascript\">\r\n  require ([\r\n    'jquery','underscore','backbone','modelbinding'\r\n  ], function ($, _, Backbone, Modelbinding ) {\r\n    ...\r\n    SomeView = Backbone.View.extend({\r\n      render: function(){\r\n        // ... render your form here\r\n        $(this.el).html(\"... some html and content goes here ... \");\r\n\r\n        // execute the model bindings\r\n        ModelBinding.bind(this);\r\n      }\r\n    });\r\n    ...\r\n  });\r\n</script>\r\n````\r\n\r\n### Migrating to AMD\r\n\r\nIf you are converting existing code referencing the Backbone.Modelbinding namespace it can still be supported \r\nby assigning the module to the namespace, optionally using require.js itself as an module. \r\nWhen above example would be:\r\n\r\n````\r\n<script type=\"text/javascript\">\r\n  require ([\r\n    'require','jquery','underscore','backbone'\r\n  ], function (require, $, _, Backbone ) {\r\n    // use require.js to load modelbinding and assign to Backbone namespace:\r\n    Backbone.Modelbinding = require('modelbinding');\r\n    ...\r\n    SomeView = Backbone.View.extend({\r\n      render: function(){\r\n        // ... render your form here\r\n        $(this.el).html(\"... some html and content goes here ... \");\r\n\r\n        // execute the model bindings\r\n        Backbone.ModelBinding.bind(this);\r\n      }\r\n    });\r\n    ...\r\n  });\r\n</script>\r\n````\r\n\r\n## Release Notes\r\n\r\n### v0.5.0\r\n\r\n* **BREAKING:** Backbone v0.5.3 is no longer officially supported. \r\n  * It should work fine right now (Backbone v0.9.0 is mostly backward compatible), but I won't be testing against v0.5.x anymore. \r\n  * If you need support for v0.5.3, use ModelBinding v0.4.3\r\n* Fixed radio field group, name binding (#60)\r\n* Updated Backbone to v0.9.0\r\n* Updated Underscore to v1.3.1\r\n* Updated jQuery to v1.7.1\r\n\r\n### v0.4.3\r\n\r\n* Added ability for data-bind to bind to arbitrary events (#51)\r\n* Fixed a few more global function leaks\r\n\r\n### v0.4.2\r\n\r\n* AMD (asynchronous module definition) support for RequireJS and other CommonJS implementations\r\n* Configure the selector used for element data-binding (#36).\r\n* Fixed a small bug in radio group bindings, related to special characters (#42)\r\n* Fixed a few more global var leaks (#40 & #41)\r\n\r\n### v0.4.1\r\n\r\n* Bind the existing value from an input element to the model on render, if no model value exists\r\n* Added HTML5 input types to the form binding conventions: number, range, tel, search, url, email\r\n\r\n### v0.4.0\r\n\r\n* Major internal rewrite to facilitate maintenance, new features, etc\r\n* No public API changes (at least, I hope not!)\r\n* Correctly unbind HTML element / jQuery events, when calling `unbind`\r\n* Corrected the `data-bind` method for showing / hiding an element when using the `displayed` and `hidden` settings\r\n* Corrected the global configuration so that it does not get reset after you call `bind` the first time\r\n* Now uses an internal object call `ModelBinder`, which is attached to the view that binding occurs on\r\n* The `ModelBinder` instance stores all of the binding configuration and callbacks for that view, allowing much faster / easier / better unbinding\r\n\r\n### v0.3.10\r\n\r\n* When binding to a select box and the model has a value not present in the box, reset the model's value to the box's\r\n* Fix for using Backbone.noConflict(), Backbone was either wrong version or undefined when it was used inside ModelBinding. \r\n* Added some missing ;\r\n* Fix some documentation issues\r\n\r\n### v0.3.9\r\n\r\n* Fixed an issue with jQuery 1.6.4 determining if check boxes are checked or not\r\n* Minor internal clean up\r\n\r\n### v0.3.8\r\n\r\n* Fix for Internet Explorer not having a `trim` method on strings\r\n\r\n### v0.3.7\r\n\r\n* Data-bind multiple attributes for a single element\r\n* Default data-bind substitutaion to '' for all attributes\r\n\r\n### v0.3.6\r\n\r\n* Fixed a bug that prevented `<input>` elements with no `type` attribute from being bound\r\n\r\n### v0.3.5\r\n\r\n* Fixed a bug in configuring the binding attribute for textarea elements\r\n\r\n### v0.3.4\r\n\r\n* Data-bind defaults to the html element's `text` if you only specify the model property: `data-bind=\"name\"`\r\n* Fixed issue with binding 1 / 0 to checkboxes (truthy / falsy values)\r\n\r\n### v0.3.3\r\n\r\n* Added data-bind attribute for setting an HTML element's `display` css\r\n* Added inserve of data-bind `displayed` as data-bind `hidden`\r\n* Corrected issue with binding a model's property to a checkbox, when the property is false\r\n\r\n### v0.3.2\r\n\r\n* Data-bind substitutions - lets you replace \"undefined\" with another, set value, when using data-bind\r\n\r\n### v0.3.1\r\n\r\n* Corrected issue with `unset`ing a model property, in the data-bind convention\r\n\r\n### v0.3.0\r\n\r\n* **Breaking Change:** Changed the `Backbone.ModelBinding.call(view)` method signature to `Backbone.ModelBinding.bind(view)`\r\n* Added ability to unbind model binding with `unbind` method, to prevent memory leaks and zombie forms\r\n* Added backbone.modelbinding.min.js to the repository, compiled with \r\n  [Google's Closure Compiler Service](http://closure-compiler.appspot.com/home \"Google's Closure Compiler Service\")\r\n* Updated the selectors used for the conventions. Text inputs are now found with \"input:text\", which should\r\n  select all text inputs, even without a `type='text'` attribute (though this seems to be buggy in jQuery \r\n  v1.6.2)\r\n* Significant internal restructuring of code\r\n\r\n### v0.2.4\r\n\r\n* Data-bind will bind the model's value immediately instead of waiting for the model's value to change\r\n* Support `enabled` functionality for data-bind: `data-bind=\"enabled isValid\"`\r\n* Documented existing support for data-bind `disabled`: `data-bind=\"disabled invalid\"`\r\n\r\n### v0.2.3\r\n\r\n* Fixes for 'falsey' value bindings\r\n* Update the docs to include when and where to call the model bindings\r\n\r\n### v0.2.2\r\n\r\n* Making some global vars not global\r\n\r\n### v0.2.1\r\n\r\n* Configuration to easily set all binding attributes for all elements\r\n* Fix for IE\r\n* Making some global vars not global\r\n\r\n### v0.1.0 - v0.2.0\r\n\r\n* Added data-bind convention\r\n* Added configuration options\r\n* Conventions for all form input types\r\n* Removed formBinding code\r\n* Removed htmlBinding code\r\n* Significant internal code cleanup and restructuring\r\n \r\n# Legal Mumbo Jumbo (MIT License)\r\n\r\nCopyright (c) 2011 Derick Bailey, Muted Solutions, LLC\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","tagline":"backbone.js model binding plugin","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}